{
    "swagger": "2.0",
    "info": {
      "description": "Conduit API",
      "version": "1.0.0",
      "title": "Conduit API",
      "contact": {
        "name": "RealWorld",
        "url": "https://realworld.io"
      },
      "license": {
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT"
      }
    },
    "basePath": "/api",
    "schemes": [
      "http"
    ],
    "produces": [
      "application/json"
    ],
    "consumes": [
      "application/json"
    ],
    "securityDefinitions": {
      "Token": {
        "description": "For accessing the protected API resources, you must have received a a valid JWT token after registering or logging in. This JWT token must then be used for all protected resources by passing it in via the 'Authorization' header.\n\nA JWT token is generated by the API by either registering via /users or logging in via /users/login.\n\nThe following format must be in the 'Authorization' header :\n\n    Token: xxxxxx.yyyyyyy.zzzzzz\n    \n",
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    },
    "paths": {
      "/users/login": {
        "post": {
          "summary": "Existing user login",
          "description": "Login for existing user",
          "tags": [
            "User and Authentication"
          ],
          "operationId": "Login",
          "parameters": [
            {
              "name": "body",
              "in": "body",
              "required": true,
              "description": "Credentials to use",
              "schema": {
                "$ref": "#/definitions/LoginUserRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/UserResponse"
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "422": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/GenericErrorModel"
              }
            }
          }
        }
      },
      "/users": {
        "post": {
          "summary": "Register a new user",
          "description": "Register a new user",
          "tags": [
            "User and Authentication"
          ],
          "operationId": "CreateUser",
          "parameters": [
            {
              "name": "body",
              "in": "body",
              "required": true,
              "description": "Details of the new user to register",
              "schema": {
                "$ref": "#/definitions/NewUserRequest"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/UserResponse"
              }
            },
            "422": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/GenericErrorModel"
              }
            }
          }
        },
        "get": {
          "summary": "Get current user",
          "description": "Gets the currently logged-in user",
          "tags": [
            "User and Authentication"
          ],
          "security": [
            {
              "Token": []
            }
          ],
          "operationId": "GetCurrentUser",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/UserResponse"
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "422": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/GenericErrorModel"
              }
            }
          }
        },
        "put": {
          "summary": "Update current user",
          "description": "Updated user information for current user",
          "tags": [
            "User and Authentication"
          ],
          "security": [
            {
              "Token": []
            }
          ],
          "operationId": "UpdateCurrentUser",
          "parameters": [
            {
              "name": "body",
              "in": "body",
              "required": true,
              "description": "User details to update. At least **one** field is required.",
              "schema": {
                "$ref": "#/definitions/UpdateUserRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/UserResponse"
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "422": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/GenericErrorModel"
              }
            }
          }
        }
      },
      "/profiles/{username}": {
        "get": {
          "summary": "Get a profile",
          "description": "Get a profile of a user of the system. Auth is optional",
          "tags": [
            "Profile"
          ],
          "operationId": "GetProfileByUsername",
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "Username of the profile to get",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ProfileResponse"
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "422": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/GenericErrorModel"
              }
            }
          }
        }
      },
      "/profiles/{username}/follow": {
        "post": {
          "summary": "Follow a user",
          "description": "Follow a user by username",
          "tags": [
            "Profile"
          ],
          "security": [
            {
              "Token": []
            }
          ],
          "operationId": "FollowUserByUsername",
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "Username of the profile you want to follow",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ProfileResponse"
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "422": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/GenericErrorModel"
              }
            }
          }
        },
        "delete": {
          "summary": "Unfollow a user",
          "description": "Unfollow a user by username",
          "tags": [
            "Profile"
          ],
          "security": [
            {
              "Token": []
            }
          ],
          "operationId": "UnfollowUserByUsername",
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "Username of the profile you want to unfollow",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ProfileResponse"
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "422": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/GenericErrorModel"
              }
            }
          }
        }
      },
      "/games/feed": {
        "get": {
          "summary": "Get recent games from users you follow",
          "description": "Get most recent games from users you follow. Use query parameters to limit. Auth is required",
          "tags": [
            "Games"
          ],
          "security": [
            {
              "Token": []
            }
          ],
          "operationId": "GetGamesFeed",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Limit number of games returned (default is 20)",
              "required": false,
              "default": 20,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Offset/skip number of games (default is 0)",
              "required": false,
              "default": 0,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/MultipleGamesResponse"
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "422": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/GenericErrorModel"
              }
            }
          }
        }
      },
      "/games": {
        "get": {
          "summary": "Get recent games globally",
          "description": "Get most recent games globally. Use query parameters to filter results. Auth is optional",
          "tags": [
            "Games"
          ],
          "operationId": "GetGames",
          "parameters": [
            {
              "name": "tag",
              "in": "query",
              "description": "Filter by tag",
              "required": false,
              "type": "string"
            },
            {
              "name": "author",
              "in": "query",
              "description": "Filter by author (username)",
              "required": false,
              "type": "string"
            },
            {
              "name": "favorited",
              "in": "query",
              "description": "Filter by favorites of a user (username)",
              "required": false,
              "type": "string"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Limit number of games returned (default is 20)",
              "required": false,
              "default": 20,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Offset/skip number of games (default is 0)",
              "required": false,
              "default": 0,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/MultipleGamesResponse"
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "422": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/GenericErrorModel"
              }
            }
          }
        },
        "post": {
          "summary": "Create an game",
          "description": "Create an game. Auth is required",
          "tags": [
            "Games"
          ],
          "security": [
            {
              "Token": []
            }
          ],
          "operationId": "CreateGame",
          "parameters": [
            {
              "name": "game",
              "in": "body",
              "required": true,
              "description": "Game to create",
              "schema": {
                "$ref": "#/definitions/NewGameRequest"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/SingleGameResponse"
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "422": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/GenericErrorModel"
              }
            }
          }
        }
      },
      "/games/{slug}": {
        "get": {
          "summary": "Get an game",
          "description": "Get an game. Auth not required",
          "tags": [
            "Games"
          ],
          "operationId": "GetGame",
          "parameters": [
            {
              "name": "slug",
              "in": "path",
              "required": true,
              "description": "Slug of the game to get",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/SingleGameResponse"
              }
            },
            "422": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/GenericErrorModel"
              }
            }
          }
        },
        "put": {
          "summary": "Update an game",
          "description": "Update an game. Auth is required",
          "tags": [
            "Games"
          ],
          "security": [
            {
              "Token": []
            }
          ],
          "operationId": "UpdateGame",
          "parameters": [
            {
              "name": "slug",
              "in": "path",
              "required": true,
              "description": "Slug of the game to update",
              "type": "string"
            },
            {
              "name": "game",
              "in": "body",
              "required": true,
              "description": "Game to update",
              "schema": {
                "$ref": "#/definitions/UpdateGameRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/SingleGameResponse"
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "422": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/GenericErrorModel"
              }
            }
          }
        },
        "delete": {
          "summary": "Delete an game",
          "description": "Delete an game. Auth is required",
          "tags": [
            "Games"
          ],
          "security": [
            {
              "Token": []
            }
          ],
          "operationId": "DeleteGame",
          "parameters": [
            {
              "name": "slug",
              "in": "path",
              "required": true,
              "description": "Slug of the game to delete",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "401": {
              "description": "Unauthorized"
            },
            "422": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/GenericErrorModel"
              }
            }
          }
        }
      },
      "/games/{slug}/comments": {
        "get": {
          "summary": "Get comments for an game",
          "description": "Get the comments for an game. Auth is optional",
          "tags": [
            "Comments"
          ],
          "operationId": "GetGameComments",
          "parameters": [
            {
              "name": "slug",
              "in": "path",
              "required": true,
              "description": "Slug of the game that you want to get comments for",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/MultipleCommentsResponse"
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "422": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/GenericErrorModel"
              }
            }
          }
        },
        "post": {
          "summary": "Create a comment for an game",
          "description": "Create a comment for an game. Auth is required",
          "tags": [
            "Comments"
          ],
          "security": [
            {
              "Token": []
            }
          ],
          "operationId": "CreateGameComment",
          "parameters": [
            {
              "name": "slug",
              "in": "path",
              "required": true,
              "description": "Slug of the game that you want to create a comment for",
              "type": "string"
            },
            {
              "name": "comment",
              "in": "body",
              "required": true,
              "description": "Comment you want to create",
              "schema": {
                "$ref": "#/definitions/NewCommentRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/SingleCommentResponse"
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "422": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/GenericErrorModel"
              }
            }
          }
        }
      },
      "/games/{slug}/comments/{id}": {
        "delete": {
          "summary": "Delete a comment for an game",
          "description": "Delete a comment for an game. Auth is required",
          "tags": [
            "Comments"
          ],
          "security": [
            {
              "Token": []
            }
          ],
          "operationId": "DeleteGameComment",
          "parameters": [
            {
              "name": "slug",
              "in": "path",
              "required": true,
              "description": "Slug of the game that you want to delete a comment for",
              "type": "string"
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "ID of the comment you want to delete",
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "401": {
              "description": "Unauthorized"
            },
            "422": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/GenericErrorModel"
              }
            }
          }
        }
      },
      "/games/{slug}/favorite": {
        "post": {
          "summary": "Favorite an game",
          "description": "Favorite an game. Auth is required",
          "tags": [
            "Favorites"
          ],
          "security": [
            {
              "Token": []
            }
          ],
          "operationId": "CreateGameFavorite",
          "parameters": [
            {
              "name": "slug",
              "in": "path",
              "required": true,
              "description": "Slug of the game that you want to favorite",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/SingleGameResponse"
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "422": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/GenericErrorModel"
              }
            }
          }
        },
        "delete": {
          "summary": "Unfavorite an game",
          "description": "Unfavorite an game. Auth is required",
          "tags": [
            "Favorites"
          ],
          "security": [
            {
              "Token": []
            }
          ],
          "operationId": "DeleteGameFavorite",
          "parameters": [
            {
              "name": "slug",
              "in": "path",
              "required": true,
              "description": "Slug of the game that you want to unfavorite",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/SingleGameResponse"
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "422": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/GenericErrorModel"
              }
            }
          }
        }
      },
      "/tags": {
        "get": {
          "summary": "Get tags",
          "description": "Get tags. Auth not required",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/TagsResponse"
              }
            },
            "422": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/GenericErrorModel"
              }
            }
          }
        }
      }
    },
    "definitions": {
      "LoginUser": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "format": "password"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "LoginUserRequest": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/definitions/LoginUser"
          }
        },
        "required": [
          "user"
        ]
      },
      "NewUser": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "format": "password"
          }
        },
        "required": [
          "username",
          "email",
          "password"
        ]
      },
      "NewUserRequest": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/definitions/NewUser"
          }
        },
        "required": [
          "user"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "image": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "token",
          "username",
          "bio",
          "image"
        ]
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/definitions/User"
          }
        },
        "required": [
          "user"
        ]
      },
      "UpdateUser": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "image": {
            "type": "string"
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/definitions/UpdateUser"
          }
        },
        "required": [
          "user"
        ]
      },
      "ProfileResponse": {
        "type": "object",
        "properties": {
          "profile": {
            "$ref": "#/definitions/Profile"
          }
        },
        "required": [
          "profile"
        ]
      },
      "Profile": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "following": {
            "type": "boolean"
          }
        },
        "required": [
          "username",
          "bio",
          "image",
          "following"
        ]
      },
      "Game": {
        "type": "object",
        "properties": {
          "slug": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "tagList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "favorited": {
            "type": "boolean"
          },
          "favoritesCount": {
            "type": "integer"
          },
          "author": {
            "$ref": "#/definitions/Profile"
          }
        },
        "required": [
          "slug",
          "title",
          "description",
          "body",
          "tagList",
          "createdAt",
          "updatedAt",
          "favorited",
          "favoritesCount",
          "author"
        ]
      },
      "SingleGameResponse": {
        "type": "object",
        "properties": {
          "game": {
            "$ref": "#/definitions/Game"
          }
        },
        "required": [
          "game"
        ]
      },
      "MultipleGamesResponse": {
        "type": "object",
        "properties": {
          "games": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Game"
            }
          },
          "gamesCount": {
            "type": "integer"
          }
        },
        "required": [
          "games",
          "gamesCount"
        ]
      },
      "NewGame": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "tagList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "title",
          "description",
          "body"
        ]
      },
      "NewGameRequest": {
        "type": "object",
        "properties": {
          "game": {
            "$ref": "#/definitions/NewGame"
          }
        },
        "required": [
          "game"
        ]
      },
      "UpdateGame": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "body": {
            "type": "string"
          }
        }
      },
      "UpdateGameRequest": {
        "type": "object",
        "properties": {
          "game": {
            "$ref": "#/definitions/UpdateGame"
          }
        },
        "required": [
          "game"
        ]
      },
      "Comment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "body": {
            "type": "string"
          },
          "author": {
            "$ref": "#/definitions/Profile"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "body",
          "author"
        ]
      },
      "SingleCommentResponse": {
        "type": "object",
        "properties": {
          "comment": {
            "$ref": "#/definitions/Comment"
          }
        },
        "required": [
          "comment"
        ]
      },
      "MultipleCommentsResponse": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Comment"
            }
          }
        },
        "required": [
          "comments"
        ]
      },
      "NewComment": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          }
        },
        "required": [
          "body"
        ]
      },
      "NewCommentRequest": {
        "type": "object",
        "properties": {
          "comment": {
            "$ref": "#/definitions/NewComment"
          }
        },
        "required": [
          "comment"
        ]
      },
      "TagsResponse": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "tags"
        ]
      },
      "GenericErrorModel": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "body": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "body"
            ]
          }
        },
        "required": [
          "errors"
        ]
      }
    }
  }